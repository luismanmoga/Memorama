//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Memorama.DataAccessService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Jugador", Namespace="http://schemas.datacontract.org/2004/07/MemoramaService.Model")]
    [System.SerializableAttribute()]
    public partial class Jugador : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContraseniaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CorreoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EstadoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Contrasenia {
            get {
                return this.ContraseniaField;
            }
            set {
                if ((object.ReferenceEquals(this.ContraseniaField, value) != true)) {
                    this.ContraseniaField = value;
                    this.RaisePropertyChanged("Contrasenia");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Correo {
            get {
                return this.CorreoField;
            }
            set {
                if ((object.ReferenceEquals(this.CorreoField, value) != true)) {
                    this.CorreoField = value;
                    this.RaisePropertyChanged("Correo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Estado {
            get {
                return this.EstadoField;
            }
            set {
                if ((object.ReferenceEquals(this.EstadoField, value) != true)) {
                    this.EstadoField = value;
                    this.RaisePropertyChanged("Estado");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DataAccessService.IDataAccessService")]
    public interface IDataAccessService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataAccessService/RegistrarJugador", ReplyAction="http://tempuri.org/IDataAccessService/RegistrarJugadorResponse")]
        int RegistrarJugador(string usuario, string correo, string contrasenia);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataAccessService/RegistrarJugador", ReplyAction="http://tempuri.org/IDataAccessService/RegistrarJugadorResponse")]
        System.Threading.Tasks.Task<int> RegistrarJugadorAsync(string usuario, string correo, string contrasenia);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataAccessService/GetJugador", ReplyAction="http://tempuri.org/IDataAccessService/GetJugadorResponse")]
        Memorama.DataAccessService.Jugador GetJugador(string correo, string contrsenia);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataAccessService/GetJugador", ReplyAction="http://tempuri.org/IDataAccessService/GetJugadorResponse")]
        System.Threading.Tasks.Task<Memorama.DataAccessService.Jugador> GetJugadorAsync(string correo, string contrsenia);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataAccessService/Autenticar", ReplyAction="http://tempuri.org/IDataAccessService/AutenticarResponse")]
        bool Autenticar(string username, string contrasenia);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataAccessService/Autenticar", ReplyAction="http://tempuri.org/IDataAccessService/AutenticarResponse")]
        System.Threading.Tasks.Task<bool> AutenticarAsync(string username, string contrasenia);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataAccessService/Existe", ReplyAction="http://tempuri.org/IDataAccessService/ExisteResponse")]
        bool Existe(string username, string correo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataAccessService/Existe", ReplyAction="http://tempuri.org/IDataAccessService/ExisteResponse")]
        System.Threading.Tasks.Task<bool> ExisteAsync(string username, string correo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataAccessService/CambiarContrasenia", ReplyAction="http://tempuri.org/IDataAccessService/CambiarContraseniaResponse")]
        bool CambiarContrasenia(string correo, string nuevaContrasenia);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataAccessService/CambiarContrasenia", ReplyAction="http://tempuri.org/IDataAccessService/CambiarContraseniaResponse")]
        System.Threading.Tasks.Task<bool> CambiarContraseniaAsync(string correo, string nuevaContrasenia);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDataAccessServiceChannel : Memorama.DataAccessService.IDataAccessService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DataAccessServiceClient : System.ServiceModel.ClientBase<Memorama.DataAccessService.IDataAccessService>, Memorama.DataAccessService.IDataAccessService {
        
        public DataAccessServiceClient() {
        }
        
        public DataAccessServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DataAccessServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DataAccessServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DataAccessServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int RegistrarJugador(string usuario, string correo, string contrasenia) {
            return base.Channel.RegistrarJugador(usuario, correo, contrasenia);
        }
        
        public System.Threading.Tasks.Task<int> RegistrarJugadorAsync(string usuario, string correo, string contrasenia) {
            return base.Channel.RegistrarJugadorAsync(usuario, correo, contrasenia);
        }
        
        public Memorama.DataAccessService.Jugador GetJugador(string correo, string contrsenia) {
            return base.Channel.GetJugador(correo, contrsenia);
        }
        
        public System.Threading.Tasks.Task<Memorama.DataAccessService.Jugador> GetJugadorAsync(string correo, string contrsenia) {
            return base.Channel.GetJugadorAsync(correo, contrsenia);
        }
        
        public bool Autenticar(string username, string contrasenia) {
            return base.Channel.Autenticar(username, contrasenia);
        }
        
        public System.Threading.Tasks.Task<bool> AutenticarAsync(string username, string contrasenia) {
            return base.Channel.AutenticarAsync(username, contrasenia);
        }
        
        public bool Existe(string username, string correo) {
            return base.Channel.Existe(username, correo);
        }
        
        public System.Threading.Tasks.Task<bool> ExisteAsync(string username, string correo) {
            return base.Channel.ExisteAsync(username, correo);
        }
        
        public bool CambiarContrasenia(string correo, string nuevaContrasenia) {
            return base.Channel.CambiarContrasenia(correo, nuevaContrasenia);
        }
        
        public System.Threading.Tasks.Task<bool> CambiarContraseniaAsync(string correo, string nuevaContrasenia) {
            return base.Channel.CambiarContraseniaAsync(correo, nuevaContrasenia);
        }
    }
}
